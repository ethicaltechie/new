
import java.io.IOException;


import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;


/**
* WordFrequenceInDocReducer.
*/
public class WordFrequenceInDocReducer extends Reducer {


public WordFrequenceInDocReducer() {
}


/**
* @param key is the key of the mapper
* @param value are all the values aggregated during the mapping phase
* @param context contains the context of the job run
* 
* PRE-CONDITION: receive a list of <"word@filename",[1, 1, 1, ...]> pairs 
* <"marcello@a.txt", [1, 1]> 
* 
* POST-CONDITION: emit the output a single key-value where the sum of the occurrences. 
* <"marcello@a.txt", 2>
*/
protected void reduce(Text key, Iterable value, Context context) throws IOException, InterruptedException {


int sum = 0;
for (Text val : value) {
sum += val.get();
}
//write the key and the adjusted value (removing the last comma)
context.write(key, new IntWritable(sum));
}
}
